# Generated by Django 5.0.6 on 2025-09-26 06:41

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AnalyzedStock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('symbol', models.CharField(help_text='The stock symbol (ticker).', max_length=20, unique=True)),
                ('stock_name', models.CharField(help_text='The name of the stock.', max_length=100)),
                ('is_investable', models.BooleanField(default=False, help_text='Whether the stock passed the initial screening.')),
                ('investment_horizon', models.CharField(choices=[('SHORT', 'Short-term'), ('MID', 'Mid-term'), ('LONG', 'Long-term'), ('NONE', 'Unclassified')], default='NONE', help_text='The recommended investment horizon from the AI analysis.', max_length=5)),
                ('analysis_date', models.DateField(auto_now=True, help_text='The date the analysis was performed.')),
                ('last_price', models.DecimalField(decimal_places=2, default=0, help_text='The stock price at the time of analysis.', max_digits=15)),
                ('raw_analysis_data', models.JSONField(blank=True, default=dict, help_text='Raw data used in the analysis (e.g., financial ratios).')),
            ],
        ),
        migrations.CreateModel(
            name='StrategySettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('trading_fee_rate', models.DecimalField(decimal_places=5, default=0.00015, help_text='매매 수수료 (예: 0.00015 for 0.015%)', max_digits=6)),
                ('trading_tax_rate', models.DecimalField(decimal_places=5, default=0.002, help_text='증권거래세 (매도 시 적용, 예: 0.0020 for 0.20%)', max_digits=6)),
                ('risk_per_trade', models.DecimalField(decimal_places=3, default=0.01, help_text='단기 트레이딩: 개별 종목 최대 리스크 비율 (예: 0.01 for 1%)', max_digits=4)),
                ('max_total_risk', models.DecimalField(decimal_places=3, default=0.1, help_text='단기 트레이딩: 포트폴리오 최대 총 리스크 비율 (예: 0.1 for 10%)', max_digits=4)),
                ('dca_base_amount', models.DecimalField(decimal_places=2, default=100000.0, help_text='우량주 분할매수: 1회당 기본 투자 금액', max_digits=15)),
                ('dca_settings_json', models.JSONField(default=dict, help_text='동적 분할매수 설정 (KOSPI 하락률에 따른 배율)')),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': '전략 설정',
                'verbose_name_plural': '전략 설정',
            },
        ),
        migrations.CreateModel(
            name='TradingAccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('account_name', models.CharField(help_text='A nickname for the account.', max_length=100)),
                ('account_number', models.CharField(help_text='The brokerage account number.', max_length=20, unique=True)),
                ('account_type', models.CharField(choices=[('SIM', 'Simulated'), ('REAL', 'Real')], default='SIM', help_text='The type of account (Simulated/Real).', max_length=4)),
                ('brokerage', models.CharField(default='Korea Investment & Securities', help_text='The name of the brokerage.', max_length=50)),
                ('app_key', models.CharField(help_text='API Key for the brokerage.', max_length=255)),
                ('app_secret', models.CharField(help_text='API Secret for the brokerage.', max_length=255)),
                ('is_active', models.BooleanField(default=True, help_text='Whether the account is currently active for trading.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(help_text='The user associated with this account.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TradeLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('symbol', models.CharField(help_text='The stock symbol (ticker).', max_length=20)),
                ('order_id', models.CharField(help_text='The order ID from the brokerage.', max_length=100)),
                ('trade_type', models.CharField(choices=[('BUY', 'Buy'), ('SELL', 'Sell')], help_text='The type of trade (Buy/Sell).', max_length=4)),
                ('quantity', models.PositiveIntegerField(help_text='The number of shares.')),
                ('price', models.DecimalField(decimal_places=2, help_text='The price per share.', max_digits=15)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('EXECUTED', 'Executed'), ('FAILED', 'Failed'), ('CANCELED', 'Canceled')], default='PENDING', help_text='The current status of the trade.', max_length=10)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('log_message', models.TextField(blank=True, help_text='Detailed message or error log for the trade.')),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trade_logs', to='trading.tradingaccount')),
            ],
        ),
        migrations.CreateModel(
            name='Portfolio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('symbol', models.CharField(help_text='The stock symbol (ticker).', max_length=20)),
                ('stock_name', models.CharField(help_text='The name of the stock.', max_length=100)),
                ('quantity', models.PositiveIntegerField(help_text='The number of shares held.')),
                ('average_buy_price', models.DecimalField(decimal_places=2, help_text='The average price at which the shares were bought.', max_digits=15)),
                ('stop_loss_price', models.DecimalField(decimal_places=2, help_text='The price at which to trigger a stop-loss sale.', max_digits=15)),
                ('target_price', models.DecimalField(decimal_places=2, help_text='The price at which to trigger a take-profit sale.', max_digits=15)),
                ('is_open', models.BooleanField(default=True, help_text='Whether this is an open position.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('entry_log', models.ForeignKey(help_text='The trade log entry for the purchase of this position.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='portfolio_entry', to='trading.tradelog')),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='portfolio_items', to='trading.tradingaccount')),
            ],
        ),
        migrations.AddConstraint(
            model_name='portfolio',
            constraint=models.UniqueConstraint(condition=models.Q(('is_open', True)), fields=('account', 'symbol'), name='unique_open_position_per_account'),
        ),
    ]
